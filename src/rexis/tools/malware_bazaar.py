import json
from typing import Any, Dict

from malwarebazaar.api import Bazaar
from malwarebazaar.models import Sample
from requests.exceptions import ConnectionError, HTTPError, Timeout
from rexis.utils.config import config
from rexis.utils.constants import MALWAREBAZAAR_QUERY_MAX_LIMIT
from rexis.utils.utils import LOGGER


def query_malware_bazaar(query_type: str, query_value: str, amount: int) -> Dict[Any, Sample]:
    """
    Queries the MalwareBazaar API for malware samples based on the specified query type and value.
    Args:
        query_type (str): The type of query to perform. Supported types are:
            - "hash": Query by a specific hash value.
            - "tag": Query by a specific tag.
            - "signature": Query by a specific signature.
            - "filetype": Query by a specific file type.
        query_value (str): The value associated with the query type (e.g., hash value, tag name, etc.).
        amount (int, optional): The maximum number of results to retrieve. Clamped to MALWAREBAZAAR_QUERY_MAX_LIMIT.
        Returns:
        Dict[Any, Sample]: A dictionary containing the results of the query.
    Raises:
        ValueError: If an unsupported query type is provided, if no results are found,
                    or if an error occurs while querying the MalwareBazaar API.
    """
    qt = (query_type or "").strip().lower()
    qv = (query_value or "").strip()

    # Validate query type early
    if qt not in {"hash", "tag", "filetype"}:
        raise ValueError(f"Unsupported query type: {query_type}")

    # Correct config attribute and validate API key
    api_key = getattr(config.collection, "malware_bazaar_api_key", None)
    if not api_key:
        raise ValueError(
            "Missing MalwareBazaar API key (config.collection.malware_bazaar_api_key or env REXIS_MALWARE_BAZAAR_API_KEY)."
        )

    limit = max(1, min(int(amount or 1), MALWAREBAZAAR_QUERY_MAX_LIMIT))
    if amount and amount > MALWAREBAZAAR_QUERY_MAX_LIMIT:
        LOGGER.info(
            f"Requested amount {amount} exceeds MALWAREBAZAAR_QUERY_MAX_LIMIT {MALWAREBAZAAR_QUERY_MAX_LIMIT}; clamping to {limit}."
        )

    LOGGER.info(f"Querying MalwareBazaar type={qt}, value={qv}, amount={limit}")
    bazaar: Bazaar = Bazaar(api_key=api_key)

    try:
        if qt == "hash":
            result = bazaar.query_hash(hash=qv)
        elif qt == "tag":
            result = bazaar.query_tag(tag=qv, limit=limit)
        elif qt == "filetype":
            result = bazaar.query_filetype(filetype=qv, limit=limit)
        else:
            raise ValueError(f"Unsupported query type: {query_type}")
    except (HTTPError, ConnectionError, Timeout) as e:
        raise ValueError(f"Network/HTTP error querying MalwareBazaar: {e}") from e
    except json.JSONDecodeError as e:
        raise ValueError(
            f"Malformed response from MalwareBazaar (non-JSON). Check API key, reduce limit, or retry later."
        ) from e
    except Exception as e:
        raise ValueError(f"Error querying MalwareBazaar API: {e}") from e

    if not isinstance(result, dict) or "data" not in result or not result.get("data"):
        raise ValueError(f"No results found for {qt}: {qv}")
    LOGGER.info(
        f"Query successful for type={qt}, value={qv}, results={len(result.get('data', []))}"
    )
    return result


def download_sample(sample_hash: str, output_path: str) -> None:
    """
    Downloads a malware sample from the MalwareBazaar API using its hash.

    Args:
        sample_hash (str): The hash of the sample to download.
        output_path (str): The file path where the sample will be saved.

    Raises:
        ValueError: If the download fails or the sample is not found.
    """
    api_key = getattr(config, "malware_bazaar_api_key", None)
    if not api_key:
        raise ValueError(
            "Missing MalwareBazaar API key (config.malware_bazaar_api_key or env REXIS_MALWARE_BAZAAR_API_KEY)."
        )

    LOGGER.info(f"Starting download for sample with hash: {sample_hash}")
    bazaar = Bazaar(api_key=api_key)

    try:
        sample_data = bazaar.download_file(sample_hash)
        if not sample_data:
            LOGGER.warning(f"Sample with hash {sample_hash} not found or could not be downloaded.")
            raise ValueError(
                f"Sample with hash {sample_hash} not found or could not be downloaded."
            )

        with open(output_path, "wb") as file:
            file.write(sample_data)

        LOGGER.info(f"Sample {sample_hash} downloaded successfully to {output_path}.")
    except (HTTPError, ConnectionError, Timeout) as e:
        raise ValueError(f"Network/HTTP error downloading sample {sample_hash}: {e}") from e
    except Exception as e:
        raise ValueError(f"Error downloading sample {sample_hash}: {e}") from e
