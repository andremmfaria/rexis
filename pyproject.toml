[project]
name = "rexis"
version = "0.1.0"
description = "Experimental framework designed to enhance static malware analysis using Large Language Models (LLMs) integrated with Retrieval-Augmented Generation (RAG)"
authors = [{ name = "Andre Faria", email = "andremarcalfaria@gmail.com" }]
requires-python = "<3.14,>=3.11"
readme = "README.md"
license = { text = "MIT" }
dependencies = [
    "malwarebazaar>=0.2.8",
    "dynaconf>=3.2.11",
    "openai>=1.99.9",
    "haystack-ai[openai,pgvector]>=2.16.1",
    "pgvector-haystack>=5.2.1",
    "vt-py>=0.21.0",
    "pyfiglet>=1.0.4",
    "rich>=14.1.0",
    "typer>=0.16.0",
    "pyghidra>=2.2.0",
    "tiktoken>=0.11.0",
    "beautifulsoup4>=4.13.4",
    "pymupdf>=1.26.3",
    "cloudscraper>=1.2.71",
    "nltk>=3.9.1",
    "malpediaclient>=0.3.2",
    "feedparser>=6.0.11",
    "python-dateutil>=2.9.0.post0",
    "requests>=2.32.4",
    "fuzzywuzzy>=0.18.0",
    "python-Levenshtein>=0.27.1",
    "python-magic>=0.4.27",
    "httpx>=0.28.1",
    "attrs>=25.3.0",
]

[project.scripts]
rexis = "rexis.main:main"
ingest = "rexis.main:ingest"
analyze-prompt = "rexis.main:analyze_prompt"

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "flake8>=7.3.0",
    "black>=25.1.0",
    "mypy>=1.17.1",
    "coverage>=7.10.4",
    "isort>=6.0.1",
    "ipython>=9.4.0",
    "pylint>=3.3.8",
    "tomli>=2.2.1",
    "pydocstyle>=6.3.0",
    "pre-commit>=4.3.0",
]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
show_missing = true
fail_under = 0

[tool.isort]
profile = "hug"
src_paths = ["isort", "test"]

[tool.pylint.main]
fail-under = 1
py-version = "3.11"

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
docstring-min-length = -1
const-naming-style = "UPPER_CASE"

[tool.pylint.format]
max-line-length = 100

[tool.tox]
legacy_tox_ini = """
[tox]
skipsdist = true
envlist = py311

[testenv]
allowlist_externals = poetry
commands =
    pdm install -v
    pdm run isort .
    pdm run black .
    pdm run pylint ./**/*.py
    pdm run coverage run -m pytest
    pdm run coverage report
"""

[tool.pdm]
distribution = true

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"
